import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import os

# Define Paths for Data (Assumes data is stored in a structured format)
TRAIN_DIR = "./data/train"  # Path to training images
VALIDATION_DIR = "./data/validation"  # Path to validation images

# Image Parameters
IMAGE_SIZE = (224, 224)  # Size expected by the pre-trained model
BATCH_SIZE = 32
EPOCHS = 10

# 1. Data Preprocessing and Augmentation
datagen_train = ImageDataGenerator(
    rescale=1.0/255,  # Normalize pixel values
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

datagen_validation = ImageDataGenerator(rescale=1.0/255)

# Load Train and Validation Datasets
train_generator = datagen_train.flow_from_directory(
    TRAIN_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

validation_generator = datagen_validation.flow_from_directory(
    VALIDATION_DIR,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

# 2. Load Pre-trained Model and Build the Classifier
base_model = tf.keras.applications.MobileNetV2(  # Pre-trained MobileNetV2
    input_shape=(224, 224, 3),
    include_top=False,  # Do not include the default classifier
    weights='imagenet'
)

# Freeze the base model layers to prevent retraining
base_model.trainable = False

# Add Custom Classifier Layers
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),  # Reduces dimensions
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(train_generator.num_classes, activation='softmax')  # Output layer
])

# 3. Compile the Model
model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 4. Train the Model
history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=validation_generator
)

# 5. Plot Training and Validation Metrics
plt.figure(figsize=(12, 4))

# Plot Accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Plot Loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

# 6. Save the Model
model.save("wildlife_monitoring_model.h5")
print("Model saved as 'wildlife_monitoring_model.h5'")

# 7. Prediction on New Images
def predict_image(image_path):
    """Predicts the class of an input image."""
    from tensorflow.keras.preprocessing import image
    import numpy as np
    
    img = image.load_img(image_path, target_size=IMAGE_SIZE)
    img_array = image.img_to_array(img) / 255.0  # Normalize
    img_array = tf.expand_dims(img_array, 0)  # Add batch dimension
    predictions = model.predict(img_array)
    predicted_class = train_generator.class_indices
    predicted_label = list(predicted_class.keys())[np.argmax(predictions)]
    
    print(f"Predicted Class: {predicted_label}")
    return predicted_label

# Example Prediction
# predict_image("./data/test/deer/sample_image.jpg")
